package com.newsportal.controller;

import com.newsportal.dao.UserDAO;
import com.newsportal.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;

import java.io.IOException;

@WebServlet({"/auth/login", "/auth/logout", "/auth/register"})
public class AuthServlet extends HttpServlet {
    private final UserDAO userDAO = new UserDAO();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        String path = req.getServletPath();
        switch (path) {
            case "/auth/login":
                req.getRequestDispatcher("/WEB-INF/views/login.jsp").forward(req, resp);
                return;
            case "/auth/register":
                req.getRequestDispatcher("/WEB-INF/views/register.jsp").forward(req, resp);
                return;
            case "/auth/logout":
                HttpSession ss = req.getSession(false);
                if (ss != null) ss.invalidate();
                resp.sendRedirect(req.getContextPath() + "/home");
                return;
            default:
                resp.sendError(404);
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        String path = req.getServletPath();
        try {
            if ("/auth/login".equals(path)) {
                String email = req.getParameter("email");
                String pw    = req.getParameter("password");

                User u = userDAO.login(email, pw); // chỉ trả về Activated=1
                if (u == null) {
                    req.setAttribute("error", "Sai email hoặc mật khẩu");
                    req.getRequestDispatcher("/WEB-INF/views/login.jsp").forward(req, resp);
                    return;
                }

                HttpSession ss = req.getSession(true);
                ss.setAttribute("authUser", u);
                ss.setAttribute("isAdmin", u.isRole()); // role=true => admin

                String target = u.isRole() ? "/admin/dashboard" : "/reporter/dashboard";
                resp.sendRedirect(req.getContextPath() + target);
                return;
            }

            if ("/auth/register".equals(path)) {
                // Lấy tham số
                String fullname = req.getParameter("fullname") == null ? "" : req.getParameter("fullname").trim();
                String email    = req.getParameter("email")    == null ? "" : req.getParameter("email").trim();
                String password = req.getParameter("password");
                String birthday = req.getParameter("birthday");          // yyyy-MM-dd (có thể rỗng)
                String gender   = req.getParameter("gender");            // "true"/"false" (có thể null)

                // Validate cơ bản
                if (fullname.isEmpty() || email.isEmpty() || password == null || password.isEmpty()) {
                    req.setAttribute("error", "Vui lòng nhập đủ Họ tên, Email và Mật khẩu.");
                    req.getRequestDispatcher("/WEB-INF/views/register.jsp").forward(req, resp);
                    return;
                }

                // Email đã tồn tại?
                if (userDAO.existsEmail(email)) {
                    req.setAttribute("error", "Email đã được đăng ký.");
                    req.getRequestDispatcher("/WEB-INF/views/register.jsp").forward(req, resp);
                    return;
                }

                // Parse ngày sinh -> java.util.Date (có thể null)
                java.util.Date dob = null;
                if (birthday != null && !birthday.isBlank()) {
                    // java.time -> java.util.Date
                    java.time.LocalDate ld = java.time.LocalDate.parse(birthday); // ISO yyyy-MM-dd
                    dob = java.util.Date.from(ld.atStartOfDay(java.time.ZoneId.systemDefault()).toInstant());
                }

                boolean gen = "true".equalsIgnoreCase(gender); // mặc định false nếu không chọn

                // Tạo user mới (mặc định Reporter, Activated=1 theo SQL của DAO.create)
                User u = new User();
                u.setFullname(fullname);
                u.setEmail(email);
                u.setPassword(password);        // (nếu muốn hash thì thay ở đây, đồng bộ với login)
                u.setMobile(null);              // form hiện tại chưa có Mobile
                u.setBirthday(dob);
                u.setGender(gen);
                u.setRole(false);               // false = Reporter
                u.setActivated(true);

                int newId = userDAO.create(u);
                u.setId(newId);

                // Tự đăng nhập sau khi đăng ký
                HttpSession ss = req.getSession(true);
                ss.setAttribute("authUser", u);
                ss.setAttribute("isAdmin", u.isRole());

                // Điều hướng giống logic login: reporter -> /reporter/dashboard
                resp.sendRedirect(req.getContextPath() + "/reporter/dashboard");
                return;
            }


            resp.sendError(404);
        } catch (Exception e) {
            throw new ServletException(e);
        }
    }
    
    
}

