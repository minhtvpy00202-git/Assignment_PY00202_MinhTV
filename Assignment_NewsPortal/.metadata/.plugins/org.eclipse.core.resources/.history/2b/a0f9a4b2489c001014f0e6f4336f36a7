package com.newsportal.dao;

import com.newsportal.model.News;
import com.newsportal.util.DB;

import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class NewsDAO {

    // ===== Public APIs dùng cho HomeServlet =====

    /** Lấy danh sách bài đặt Trang nhất (Home = 1), đã duyệt, mới nhất trước. */
    public List<News> findHome(int limit) throws Exception {
        String sql =
            "SELECT Id, Title, [Content], [Image], PostedDate, Author, ViewCount, " +
            "       CategoryId, [Home], Approved, ReporterId " +
            "FROM News " +
            "WHERE Approved = 1 AND [Home] = 1 " +
            "ORDER BY PostedDate DESC " +
            "OFFSET 0 ROWS FETCH NEXT " + Math.max(0, limit) + " ROWS ONLY";
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            List<News> list = new ArrayList<>();
            while (rs.next()) list.add(map(rs));
            return list;
        }
    }

    /** Top N hot theo ViewCount giảm dần, chỉ lấy bài đã duyệt. */
    public List<News> findTopHot(int limit) throws Exception {
        String sql =
            "SELECT Id, Title, [Content], [Image], PostedDate, Author, ViewCount, " +
            "       CategoryId, [Home], Approved, ReporterId " +
            "FROM News " +
            "WHERE Approved = 1 " +
            "ORDER BY ViewCount DESC, PostedDate DESC " +
            "OFFSET 0 ROWS FETCH NEXT " + Math.max(0, limit) + " ROWS ONLY";
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            List<News> list = new ArrayList<>();
            while (rs.next()) list.add(map(rs));
            return list;
        }
    }

    /** Top N mới theo PostedDate, chỉ lấy bài đã duyệt. */
    public List<News> findTopNew(int limit) throws Exception {
        String sql =
            "SELECT Id, Title, [Content], [Image], PostedDate, Author, ViewCount, " +
            "       CategoryId, [Home], Approved, ReporterId " +
            "FROM News " +
            "WHERE Approved = 1 " +
            "ORDER BY PostedDate DESC " +
            "OFFSET 0 ROWS FETCH NEXT " + Math.max(0, limit) + " ROWS ONLY";
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            List<News> list = new ArrayList<>();
            while (rs.next()) list.add(map(rs));
            return list;
        }
    }

    /** Lấy 1 bài theo Id (có thể dùng cả khi chưa duyệt, tuỳ luồng). */
    public News findById(int id) throws Exception {
        String sql =
            "SELECT Id, Title, [Content], [Image], PostedDate, Author, ViewCount, " +
            "       CategoryId, [Home], Approved, ReporterId " +
            "FROM News WHERE Id = ?";
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                return rs.next() ? map(rs) : null;
            }
        }
    }

    // ===== (Tuỳ chọn) Hữu ích cho phần khác =====

    /** Tăng view 1 đơn vị (gọi trong NewsDetailServlet). */
    public void increaseView(int id) throws Exception {
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(
                     "UPDATE News SET ViewCount = ViewCount + 1 WHERE Id = ?")) {
            ps.setInt(1, id);
            ps.executeUpdate();
        }
    }

    /** Truy vấn theo Category (đã duyệt), có phân trang. */
    public List<News> findByCategory(int categoryId, int offset, int pageSize) throws Exception {
        String sql =
            "SELECT Id, Title, [Content], [Image], PostedDate, Author, ViewCount, " +
            "       CategoryId, [Home], Approved, ReporterId " +
            "FROM News WHERE Approved = 1 AND CategoryId = ? " +
            "ORDER BY PostedDate DESC " +
            "OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setInt(1, categoryId);
            ps.setInt(2, Math.max(0, offset));
            ps.setInt(3, Math.max(0, pageSize));
            try (ResultSet rs = ps.executeQuery()) {
                List<News> list = new ArrayList<>();
                while (rs.next()) list.add(map(rs));
                return list;
            }
        }
    }

    /** Tìm kiếm tiêu đề/nội dung (đã duyệt). */
    public List<News> search(String keyword, int limit) throws Exception {
        String kw = (keyword == null ? "" : keyword.trim());
        String sql =
            "SELECT Id, Title, [Content], [Image], PostedDate, Author, ViewCount, " +
            "       CategoryId, [Home], Approved, ReporterId " +
            "FROM News WHERE Approved = 1 AND (Title LIKE ? OR [Content] LIKE ?) " +
            "ORDER BY PostedDate DESC " +
            "OFFSET 0 ROWS FETCH NEXT " + Math.max(0, limit) + " ROWS ONLY";
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(sql)) {
            String like = "%" + kw + "%";
            ps.setString(1, like);
            ps.setString(2, like);
            try (ResultSet rs = ps.executeQuery()) {
                List<News> list = new ArrayList<>();
                while (rs.next()) list.add(map(rs));
                return list;
            }
        }
    }
    
 // các bài đã duyệt theo chuyên mục, mới nhất trước
   


    // ===== Mapping chung =====

    private News map(ResultSet rs) throws SQLException {
        News n = new News();
        n.setId(rs.getInt("Id"));
        n.setTitle(rs.getString("Title"));
        n.setContent(rs.getString("Content"));     // cột [Content]
        n.setImage(rs.getString("Image"));         // cột [Image]
        Timestamp ts = rs.getTimestamp("PostedDate");
        n.setPostedDate(ts != null ? ts.toLocalDateTime() : null);
        n.setAuthor(rs.getString("Author"));
        n.setViewCount(rs.getInt("ViewCount"));
        n.setCategoryId(rs.getInt("CategoryId"));
        n.setHome(rs.getBoolean("Home"));
        n.setApproved(rs.getBoolean("Approved"));

        int rep = rs.getInt("ReporterId");
        n.setReporterId(rs.wasNull() ? null : rep);
        return n;
    }
}
