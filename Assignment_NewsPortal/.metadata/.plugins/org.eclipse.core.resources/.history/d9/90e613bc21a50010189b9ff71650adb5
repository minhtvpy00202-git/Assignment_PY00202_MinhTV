package com.newsportal.controller;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

import com.newsportal.dao.NewsDAO;
import com.newsportal.model.Category;
import com.newsportal.model.News;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;



@WebServlet({"/news-detail", "/news/*"})
public class NewsDetailServlet extends HttpServlet {

    private static final String RECENT_COOKIE = "recent";
    private static final int    RECENT_KEEP   = 50; // lưu tối đa 50 id; Home chỉ lấy top 5
    private final NewsDAO newsDAO = new NewsDAO();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        try {
            int id = parseId(req);
            if (id <= 0) {
                resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "ID không hợp lệ");
                return;
            }

            News news = newsDAO.findById(id);
            if (news == null) {
                resp.sendError(HttpServletResponse.SC_NOT_FOUND, "Không tìm thấy bài viết");
                return;
            }

            // Tăng lượt xem
            newsDAO.increaseViewCount(id);

            // Ghi cookie "recent" để HomeServlet đọc hiển thị "5 bản tin bạn đã xem"
            pushRecentCookie(req, resp, id);
            
            // Render Menu theo thể loại:
            try {
            	List<Category> categories = safeList(() -> categoryDAO.findAll());
            	req.setAttribute("categories", categories);
            } catch (Exception ignore) {
                req.setAttribute("categories", java.util.Collections.emptyList());
            }

            try {
                // Lấy một vài bài cùng chuyên mục (loại chính bài đang xem nếu có)
                List<News> related = newsDAO.findByCategory(news.getCategoryId(), 5);
                if (related != null) related.removeIf(n -> n.getId() == news.getId());
                req.setAttribute("related", related);
            } catch (Exception ignore) {
                req.setAttribute("related", java.util.Collections.emptyList());
            }

            req.setAttribute("news", news);
            req.getRequestDispatcher("/WEB-INF/views/news-detail.jsp").forward(req, resp);

        } catch (Exception e) {
            e.printStackTrace();
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
        }
    }

    /* --------- Helpers --------- */

    /** Hỗ trợ cả ?id=123 và /news/123 */
    private int parseId(HttpServletRequest req) {
        String qid = req.getParameter("id");
        if (qid != null && qid.matches("\\d+")) return Integer.parseInt(qid);

        String path = req.getPathInfo(); // "/123"
        if (path != null && path.length() > 1) {
            String s = path.substring(1);
            if (s.matches("\\d+")) return Integer.parseInt(s);
        }
        return -1;
    }

    /** Đưa id bài viết vào cookie 'recent' (đẩy lên đầu, loại trùng, giới hạn RECENT_KEEP). */
    private void pushRecentCookie(HttpServletRequest req, HttpServletResponse resp, int newsId) {
        // Đọc cookie hiện có (đã URL-encode)
        String cur = null;
        Cookie[] cookies = req.getCookies();
        if (cookies != null) {
            for (Cookie c : cookies) {
                if (RECENT_COOKIE.equals(c.getName())) { cur = c.getValue(); break; }
            }
        }

        // Decode -> parse
        java.util.LinkedHashSet<Integer> set = new java.util.LinkedHashSet<>();
        if (cur != null && !cur.isBlank()) {
            String decoded = java.net.URLDecoder.decode(cur, StandardCharsets.UTF_8);
            for (String s : decoded.split("\\|")) {
                if (s.matches("\\d+")) set.add(Integer.parseInt(s));
            }
        }

        // Đưa id mới lên đầu, loại trùng, giới hạn số lượng
        set.remove(newsId);
        java.util.LinkedList<Integer> list = new java.util.LinkedList<>(set);
        list.addFirst(newsId);
        while (list.size() > RECENT_KEEP) list.removeLast();

        // Join bằng '|' rồi URL-encode để vượt qua strict cookie validator
        String raw = list.stream().map(String::valueOf).collect(java.util.stream.Collectors.joining("|"));
        String encoded = URLEncoder.encode(raw, StandardCharsets.UTF_8);

        Cookie cookie = new Cookie(RECENT_COOKIE, encoded);
        String ctx = req.getContextPath();
        cookie.setPath((ctx == null || ctx.isEmpty()) ? "/" : ctx);
        cookie.setHttpOnly(true);
        cookie.setMaxAge(60 * 60 * 24 * 30); // 30 ngày
        resp.addCookie(cookie);
    }
}
