package com.newsportal.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import com.newsportal.model.User;
import com.newsportal.util.DB;

public class UserDAO {

    

    public User findById(int id) throws Exception {
        String sql = "SELECT * FROM Users WHERE Id=?";
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                return rs.next() ? map(rs) : null;
            }
        }
    }

    public List<User> findAll() throws Exception {
        String sql = "SELECT * FROM Users ORDER BY Id DESC";
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            List<User> list = new ArrayList<>();
            while (rs.next()) list.add(map(rs));
            return list;
        }
    }

    public int create(User u) throws Exception {
        String sql = "INSERT INTO Users(Fullname, Email, [Password], Mobile, Birthday, Gender, Role, Activated) "
                   + "VALUES (?, ?, ?, ?, ?, ?, ?, 1)";
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setString(1, u.getFullname());
            ps.setString(2, u.getEmail());
            ps.setString(3, u.getPassword());
            ps.setString(4, u.getMobile());
            if (u.getBirthday() != null) ps.setDate(5, java.sql.Date.valueOf(u.getBirthday()));
            else ps.setNull(5, java.sql.Types.DATE);
            ps.setBoolean(6, u.isGender());
            ps.setBoolean(7, u.isRole()); // true=admin, false=reporter
            ps.executeUpdate();
            try (ResultSet rs = ps.getGeneratedKeys()) {
                return rs.next() ? rs.getInt(1) : 0;
            }
        }
    }
    
    public User login(String email, String password) throws Exception {
        String sql = "SELECT Id, Fullname, Email, Mobile, Birthday, Gender, Role, Activated "
                   + "FROM Users WHERE Email=? AND [Password]=? AND Activated=1";
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(sql)) {
            ps.setString(1, email);
            ps.setString(2, password);
            try (ResultSet rs = ps.executeQuery()) {
                if (!rs.next()) return null;
                User u = new User();
                u.setId(rs.getInt("Id"));
                u.setFullname(rs.getString("Fullname"));
                u.setEmail(rs.getString("Email"));
                u.setMobile(rs.getString("Mobile"));
                Date bd = rs.getDate("Birthday");
                if (bd != null) u.setBirthday(bd.toLocalDate());
                u.setGender(rs.getBoolean("Gender"));
                u.setRole(rs.getBoolean("Role"));   // true=admin
                u.setActivated(rs.getBoolean("Activated"));
                return u;
            }
        }
    }



    public void update(User u) throws Exception {
        String sql = """
            UPDATE Users SET [Password]=?, Fullname=?, Birthday=?, Gender=?, Mobile=?, Email=?, Role=?
            WHERE Id=?
            """;
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement(sql)) {

            // 1 Password, 2 Fullname
            ps.setString(1, u.getPassword());
            ps.setString(2, u.getFullname());

            // 3 Birthday (LocalDate -> java.sql.Date)
            if (u.getBirthday() != null) {
                ps.setDate(3, new java.sql.Date(u.getBirthday().getTime()));
            } else {
                ps.setNull(3, java.sql.Types.DATE);
            }


            // 4 Gender (có thể null)
            // Nếu User.getGender() trả về Boolean:
            ps.setBoolean(4, u.isGender());


            // 5 Mobile, 6 Email
            ps.setString(5, u.getMobile());
            ps.setString(6, u.getEmail());

            // 7 Role (BIT/boolean)  true=Admin, false=Reporter
            ps.setBoolean(7, u.isRole());

            // 8 Id
            ps.setInt(8, u.getId());

            ps.executeUpdate();
        }
    }


    public void delete(int id) throws Exception {
        try (Connection cn = DB.getConnection();
             PreparedStatement ps = cn.prepareStatement("DELETE FROM Users WHERE Id=?")) {
            ps.setInt(1, id);
            ps.executeUpdate();
        }
    }

    /* ---------- helpers ---------- */
    private User map(ResultSet rs) throws Exception {
        User u = new User();

        u.setId(rs.getInt("Id"));
        u.setPassword(rs.getString("Password"));
        u.setFullname(rs.getString("Fullname"));

        // Birthday
        java.sql.Date bd = rs.getDate("Birthday");
        if (bd != null) {
            u.setBirthday(new java.util.Date(bd.getTime())); // <-- đổi sang java.util.Date
        } else {
            u.setBirthday(null);
        }

        // Gender (có thể null)
        Object g = rs.getObject("Gender");                       // trả về null nếu cột NULL
        u.setGender(g == null ? null : rs.getBoolean("Gender")); // nếu field là Boolean
        // Nếu field là boolean primitive: boolean gb = rs.getBoolean("Gender"); u.setGender(gb);

        u.setMobile(rs.getString("Mobile"));
        u.setEmail(rs.getString("Email"));

        // Role (BIT -> boolean)
        u.setRole(rs.getBoolean("Role")); // true=Admin, false=Reporter

        return u;
    }

}
