package com.newsportal.dao;

import com.newsportal.model.News;
import com.newsportal.util.Jdbc;
import com.newsportal.util.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.List;

public class NewsDAO {

    private static final RowMapper<News> MAPPER = rs -> {
        News n = new News();
        n.setId(rs.getLong("Id"));
        n.setTitle(rs.getString("Title"));
        n.setContent(rs.getString("Content")); // alias từ [Content] as Content
        n.setImage(rs.getString("Image"));
        // PostedDate có thể là datetime2
        java.sql.Timestamp ts = rs.getTimestamp("PostedDate");
        n.setPostedDate(ts == null ? null : ts.toLocalDateTime());
        n.setAuthor(rs.getString("Author"));
        n.setViewCount(rs.getInt("ViewCount"));
        n.setCategoryId(rs.getInt("CategoryId"));
        n.setHome(rs.getBoolean("Home"));
        n.setApproved(rs.getBoolean("Approved"));
        n.setReporterId(rs.getString("ReporterId"));
        return n;
    };

    private static final String BASE_SELECT = """
        SELECT Id, Title, [Content] AS Content, Image, PostedDate, Author,
               ViewCount, CategoryId, Home, Approved, ReporterId
        FROM News
        """;

    public News findById(long id) throws SQLException {
        String sql = BASE_SELECT + " WHERE Id=?";
        return Jdbc.queryOne(sql, MAPPER, id);
    }

    public List<News> findAll() throws SQLException {
        String sql = BASE_SELECT + " ORDER BY PostedDate DESC, Id DESC";
        return Jdbc.query(sql, MAPPER);
    }

    public List<News> latest(int limit) throws SQLException {
        String sql = BASE_SELECT + " WHERE Approved=1 ORDER BY PostedDate DESC OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY";
        return Jdbc.query(sql, MAPPER, limit);
    }

    public List<News> findByCategory(int categoryId, int offset, int pageSize) throws SQLException {
        String sql = BASE_SELECT + """
            WHERE Approved=1 AND CategoryId=?
            ORDER BY PostedDate DESC, Id DESC
            OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
            """;
        return Jdbc.query(sql, MAPPER, categoryId, offset, pageSize);
    }

    public List<News> search(String keyword, int offset, int pageSize) throws SQLException {
        String like = "%" + keyword + "%";
        String sql = BASE_SELECT + """
            WHERE Approved=1 AND (Title LIKE ? OR [Content] LIKE ?)
            ORDER BY PostedDate DESC, Id DESC
            OFFSET ? ROWS FETCH NEXT ? ROWS ONLY
            """;
        return Jdbc.query(sql, MAPPER, like, like, offset, pageSize);
    }

    public List<News> pendingList() throws SQLException {
        String sql = BASE_SELECT + " WHERE Approved=0 ORDER BY PostedDate DESC, Id DESC";
        return Jdbc.query(sql, MAPPER);
    }

    public long create(News n) throws SQLException {
        if (n.getPostedDate() == null) n.setPostedDate(LocalDateTime.now());
        String sql = """
            INSERT INTO News(Title,[Content],Image,PostedDate,Author,ViewCount,CategoryId,Home,Approved,ReporterId)
            VALUES (?,?,?,?,?,?,?,?,?,?)
            """;
        return Jdbc.insertAndReturnId(sql,
                n.getTitle(), n.getContent(), n.getImage(),
                java.sql.Timestamp.valueOf(n.getPostedDate()),
                n.getAuthor(), n.getViewCount(), n.getCategoryId(),
                n.isHome(), n.isApproved(), n.getReporterId());
    }

    public int update(News n) throws SQLException {
        String sql = """
            UPDATE News
            SET Title=?, [Content]=?, Image=?, PostedDate=?, Author=?,
                ViewCount=?, CategoryId=?, Home=?, Approved=?, ReporterId=?
            WHERE Id=?
            """;
        return Jdbc.update(sql,
                n.getTitle(), n.getContent(), n.getImage(),
                n.getPostedDate() == null ? null : java.sql.Timestamp.valueOf(n.getPostedDate()),
                n.getAuthor(), n.getViewCount(), n.getCategoryId(),
                n.isHome(), n.isApproved(), n.getReporterId(),
                n.getId());
    }

    public int delete(long id) throws SQLException {
        return Jdbc.update("DELETE FROM News WHERE Id=?", id);
    }

    public int setApproved(long id, boolean approved) throws SQLException {
        return Jdbc.update("UPDATE News SET Approved=? WHERE Id=?", approved, id);
    }

    public int setHome(long id, boolean home) throws SQLException {
        return Jdbc.update("UPDATE News SET Home=? WHERE Id=?", home, id);
    }

    public int increaseViewCount(long id) throws SQLException {
        return Jdbc.update("UPDATE News SET ViewCount = ISNULL(ViewCount,0) + 1 WHERE Id=?", id);
    }

    public int countApprovedByCategory(int categoryId) throws SQLException {
        Number n = Jdbc.queryForObject("SELECT COUNT(*) FROM News WHERE Approved=1 AND CategoryId=?", categoryId);
        return n == null ? 0 : n.intValue();
    }
}
